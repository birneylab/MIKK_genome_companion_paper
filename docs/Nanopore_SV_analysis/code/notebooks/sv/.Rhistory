target_files
python
reticulate::repl_python()
# Get miniconda
#use_condaenv(conda_list()[[2]][3])
# Install packages
py_install("dask")
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
library(here)
getwd()
cd(here::here())
cwd(here::here())
setwd(here::here())
getwd()
# Read in chromosomes file
chroms = read.table(here::here("data/Oryzias_latipes.ASM223467v1.dna.toplevel.fa_chr_counts.txt"))
View(chroms)
# Read in chromosomes file
chroms = read.table(here::here("data/Oryzias_latipes.ASM223467v1.dna.toplevel.fa_chr_counts.txt")) %>%
dplyr::select(LABEL = V1, END = V2)
library(tidyverse)
# Read in chromosomes file
chroms = read.table(here::here("data/Oryzias_latipes.ASM223467v1.dna.toplevel.fa_chr_counts.txt")) %>%
dplyr::select(LABEL = V1, END = V2)
View(chroms)
# Read in chromosomes file
chroms = read.table(here::here("data/Oryzias_latipes.ASM223467v1.dna.toplevel.fa_chr_counts.txt")) %>%
dplyr::select(LABEL = V1, END = V2) %>%
dplyr::mutate(chr = "chr",
`-` = "-")
# Read in chromosomes file
chroms = read.table(here::here("data/Oryzias_latipes.ASM223467v1.dna.toplevel.fa_chr_counts.txt")) %>%
dplyr::select(LABEL = V1, END = V2) %>%
dplyr::mutate(chr = "chr",
`-` = "-",
ID = paste("ol", LABEL, sep = ""))
# Read in chromosomes file
chroms = read.table(here::here("data/Oryzias_latipes.ASM223467v1.dna.toplevel.fa_chr_counts.txt")) %>%
dplyr::select(LABEL = V1, END = V2) %>%
dplyr::mutate(chr = "chr",
`-` = "-",
ID = paste("ol", LABEL, sep = ""),
START = 0,
COLOR = paste("chr", LABEL, sep = ""))
# Read in chromosomes file
chroms = read.table(here::here("data/Oryzias_latipes.ASM223467v1.dna.toplevel.fa_chr_counts.txt")) %>%
dplyr::select(LABEL = V1, END = V2) %>%
dplyr::mutate(chr = "chr",
`-` = "-",
ID = paste("ol", LABEL, sep = ""),
START = 0,
COLOR = paste("chr", LABEL, sep = "")) %>%
dplyr::select(chr, `-`, ID, LABEL, START, END, COLOR)
View(chroms)
?readr::write_csv
out_file = here::here("data/sv_analysis/20210218_karyotype.hdrr.txt")
# Read in chromosomes file
chroms = read.table(here::here("data/Oryzias_latipes.ASM223467v1.dna.toplevel.fa_chr_counts.txt")) %>%
dplyr::select(LABEL = V1, END = V2) %>%
dplyr::mutate(chr = "chr",
`-` = "-",
ID = paste("ol", LABEL, sep = ""),
START = 0,
COLOR = paste("chr", LABEL, sep = "")) %>%
dplyr::select(chr, `-`, ID, LABEL, START, END, COLOR) %>%
readr::write_delim(out_file, col_names = F)
70.614
70/614
library(circlize)
install.packages("circlize")
library(circlize)
set.seed(999)
n = 1000
df = data.frame(sectors = sample(letters[1:8], n, replace = TRUE),
x = rnorm(n), y = runif(n))
View(df)
circos.par("track.height" = 0.1)
circos.initialize(df$sectors, x = df$x)
set.seed(999)
n = 1000
df = data.frame(sectors = sample(letters[1:8], n, replace = TRUE),
x = rnorm(n), y = runif(n))
circos.par("track.height" = 0.1)
circos.initialize(df$sectors, x = df$x)
set.seed(999)
n = 1000
df = data.frame(sectors = sample(letters[1:8], n, replace = TRUE),
x = rnorm(n), y = runif(n))
library(circlize)
circos.par("track.height" = 0.1)
circos.initialize(df$sectors, x = df$x)
set.seed(999)
n = 1000
df = data.frame(sectors = sample(letters[1:8], n, replace = TRUE),
x = rnorm(n), y = runif(n))
circos.par("track.height" = 0.1)
circos.initialize(df$sectors, x = df$x)
circos.track(df$sectors, y = df$y,
panel.fun = function(x, y) {
circos.text(CELL_META$xcenter,
CELL_META$cell.ylim[2] + mm_y(5),
CELL_META$sector.index)
circos.axis(labels.cex = 0.6)
})
col = rep(c("#FF0000", "#00FF00"), 4)
circos.trackPoints(df$sectors, df$x, df$y, col = col, pch = 16, cex = 0.5)
circos.text(-1, 0.5, "text", sector.index = "a", track.index = 1)
bed = generateRandomBed()
View(bed)
str(bed)
circos.initializeWithIdeogram?
?circos.initializeWithIdeogram
text(0, 0, "default", cex = 1)
circos.initializeWithIdeogram()
text(0, 0, "default", cex = 1)
circos.initializeWithIdeogram("oryLat2")
chroms = read.table(here::here("data/Oryzias_latipes.ASM223467v1.dna.toplevel.fa_chr_counts.txt"))
View(chroms)
chroms = read.table(here::here("data/Oryzias_latipes.ASM223467v1.dna.toplevel.fa_chr_counts.txt")) %>%
dplyr::select(LABEL = V1, END = V2) %>%
dplyr::mutate(chr = "chr",
`-` = "-",
ID = paste("ol", LABEL, sep = ""),
START = 0)
library(tidyverse)
chroms = read.table(here::here("data/Oryzias_latipes.ASM223467v1.dna.toplevel.fa_chr_counts.txt")) %>%
dplyr::select(LABEL = V1, END = V2) %>%
dplyr::mutate(chr = "chr",
`-` = "-",
ID = paste("ol", LABEL, sep = ""),
START = 0)
View(chroms)
chroms = read.table(here::here("data/Oryzias_latipes.ASM223467v1.dna.toplevel.fa_chr_counts.txt")) %>%
dplyr::select(chr = V1, end = V2) %>%
dplyr::mutate(chr = paste("chr", chr, sep = ""),
start = 0) %>%
dplyr::select(chr, start, end)
View(chroms)
str(chroms)
chroms = read.table(here::here("data/Oryzias_latipes.ASM223467v1.dna.toplevel.fa_chr_counts.txt")) %>%
dplyr::select(chr = V1, end = V2) %>%
dplyr::mutate(chr = paste("chr", chr, sep = ""),
start = 0) %>%
dplyr::select(chr, start, end)
circos.initializeWithIdeogram(chroms)
circos.initializeWithIdeogram()
cytoband.file = system.file(package = "circlize", "extdata", "cytoBand.txt")
cytoband.file
read.table(cytoband.file, colClasses = c("character", "numeric",
"numeric", "character", "character"), sep = "\t")
test = read.table(cytoband.file, colClasses = c("character", "numeric",
"numeric", "character", "character"), sep = "\t")
View(test)
str(test)
str(chroms)
chroms = read.table(here::here("data/Oryzias_latipes.ASM223467v1.dna.toplevel.fa_chr_counts.txt")) %>%
dplyr::select(chr = V1, end = V2) %>%
dplyr::mutate(chr = paste("chr", chr, sep = ""),
start = 0,
end = as.numeric(end)) #%>%
str(chroms)
chroms = read.table(here::here("data/Oryzias_latipes.ASM223467v1.dna.toplevel.fa_chr_counts.txt")) %>%
dplyr::select(chr = V1, end = V2) %>%
dplyr::mutate(chr = paste("chr", chr, sep = ""),
start = 0,
end = as.numeric(end)) %>%
dplyr::select(chr, start, end)
str(chroms)
circos.initializeWithIdeogram(chroms)
View(chroms)
circos.initializeWithIdeogram(chroms)
circos.genomicInitialize(chroms)
in_dir = here::here("data", "sv_analysis/20210217_sviper_filter_pass)
in_dir = here::here("data", "sv_analysis/20210217_sviper_filter_pass)
in_dir = here::here("data", "sv_analysis/20210217_sviper_filter_pass")
in_files = list.files(in_dir)
in_files
in_files = list.files(in_dir, full.names = T)
sv_df = lapply(in_files, function(in_file){
df = readr::read_csv(in_file)
return(df)
})
View(sv_df)
names(in_files) = basename(in_files) %>%
str_remove(".csv")
sv_df = lapply(in_files, function(in_file){
df = readr::read_csv(in_file)
return(df)
})
View(sv_df)
View(sv_df[["11-1"]])
sv_df = lapply(in_files, function(in_file){
df = readr::read_csv(in_file,
col_names = c('CHROM', 'POS', 'ALT', 'SVLEN', 'SVTYPE', 'CHR2', 'END', 'GT', 'LN', 'ST'))
return(df)
}) %>%
dplyr::bind_rows(.id = "SAMPLE")
View(sv_df)
73510 - 67640
unique(sv_df$CHROM)
?read_csv
sv_df = lapply(in_files, function(in_file){
df = readr::read_csv(in_file,
col_names = c("CHROM", "POS", "ALT", "SVLEN", "SVTYPE", "CHR2", "END", "GT", "LN", "ST"),
col_types = c("ciciccicic"))
return(df)
}) %>%
dplyr::bind_rows(.id = "SAMPLE")
View(sv_df)
head(tp_family)
tp_family = readRDS(system.file(package = "circlize", "extdata", "tp_family_df.rds"))
head(tp_family)
n = max(tapply(tp_family$transcript, tp_family$gene, function(x) length(unique(x))))
n
?tapply
/tapply
?tapply
?apply
tp_family = readRDS(system.file(package = "circlize", "extdata", "tp_family_df.rds"))
head(tp_family)
n = max(tapply(tp_family$transcript, tp_family$gene, function(x) length(unique(x))))
in_dir = here::here("data", "sv_analysis/20210217_sviper_filter_pass")
in_files = list.files(in_dir, full.names = T)
names(in_files) = basename(in_files) %>%
str_remove(".csv")
sv_df = lapply(in_files, function(in_file){
df = readr::read_csv(in_file,
col_names = c("CHROM", "POS", "ALT", "SVLEN", "SVTYPE", "CHR2", "END", "GT", "LN", "ST"),
col_types = c("ciciccicic"))
return(df)
}) %>%
dplyr::bind_rows(.id = "SAMPLE") %>%
# add "chr" to beginning of CHROM column
dplyr::mutate(CHROM = paste("chr", CHROM, sep = ""))
View(sv_df)
# Initialize plot
circos.genomicInitialize(chroms)
#
View(tp_family)
unique(value$transcript)
# Get deletions data
sv_dels = sv_df %>%
dplyr::filter(SVTYPE == "DEL")
View(sv_dels)
# Get deletions data
sv_dels = sv_df %>%
dplyr::filter(SVTYPE == "DEL") %>%
dprly::select(CHROM, POS, END, SAMPLE)
# Get deletions data
sv_dels = sv_df %>%
dplyr::filter(SVTYPE == "DEL") %>%
dplyr::select(CHROM, POS, END, SAMPLE)
View(sv_dels)
# Initialize plot
circos.genomicInitialize(chroms)
# Add deletion data
circos.genomicTrack(sv_dels,
panel.fun = function(region, value, ...) {
# numeric.column is automatically passed to `circos.genomicPoints()`
circos.genomicRect(region, value, ytop = 1, ybottom = 0)
})
# Initialize plot
circos.genomicInitialize(chroms)
# Add deletion data
circos.genomicTrack(sv_dels, ylim = c(0,1),
panel.fun = function(region, value, ...) {
# numeric.column is automatically passed to `circos.genomicPoints()`
circos.genomicRect(region, value, ytop = 1, ybottom = 0)
})
# Get deletions data
sv_dels = sv_df %>%
dplyr::filter(SVTYPE == "DEL") %>%
dplyr::select(CHROM, POS, END, SAMPLE) %>%
dplyr::filter(SAMPLE == "11-1")
# Initialize plot
circos.genomicInitialize(chroms)
# Add deletion data
circos.genomicTrack(sv_dels, ylim = c(0,1),
panel.fun = function(region, value, ...) {
# numeric.column is automatically passed to `circos.genomicPoints()`
circos.genomicRect(region, value, ytop = 1, ybottom = 0)
})
?sample_n
# Get deletions data
sv_dels = sv_df %>%
dplyr::filter(SVTYPE == "DEL") %>%
dplyr::select(CHROM, POS, END, SAMPLE) %>%
dplyr::filter(SAMPLE == "11-1") %>%
dplyr::slice_sample(n = 100)
# Initialize plot
circos.genomicInitialize(chroms)
# Add deletion data
circos.genomicTrack(sv_dels, ylim = c(0,1),
panel.fun = function(region, value, ...) {
# numeric.column is automatically passed to `circos.genomicPoints()`
circos.genomicRect(region, value, ytop = 1, ybottom = 0)
})
# Get deletions data
sv_dels = sv_df %>%
dplyr::filter(SVTYPE == "DEL") %>%
dplyr::select(CHROM, POS, END, SAMPLE) %>%
dplyr::filter(SAMPLE == "11-1") %>%
dplyr::slice_sample(n = 1000)
# Initialize plot
circos.genomicInitialize(chroms)
# Add deletion data
circos.genomicTrack(sv_dels, ylim = c(0,1),
panel.fun = function(region, value, ...) {
# numeric.column is automatically passed to `circos.genomicPoints()`
circos.genomicRect(region, value, ytop = 1, ybottom = 0)
})
# Initialize plot
circos.genomicInitialize(chroms)
# Add deletion data
#circos.genomicTrack(sv_dels, ylim = c(0,1),
#    panel.fun = function(region, value, ...) {
#        # numeric.column is automatically passed to `circos.genomicPoints()`
#        circos.genomicRect(region, value, ytop = 1, ybottom = 0)
#})
circos.genomicDensity(sv_dels, col = c("#0000FF80"), track.height = 0.1)
# Get deletions data
sv_dels = sv_df %>%
dplyr::filter(SVTYPE == "DEL") %>%
dplyr::select(CHROM, POS, END, SAMPLE) %>%
dplyr::filter(SAMPLE == "11-1")
# Initialize plot
circos.genomicInitialize(chroms)
# Add deletion data
#circos.genomicTrack(sv_dels, ylim = c(0,1),
#    panel.fun = function(region, value, ...) {
#        # numeric.column is automatically passed to `circos.genomicPoints()`
#        circos.genomicRect(region, value, ytop = 1, ybottom = 0)
#})
circos.genomicDensity(sv_dels, col = c("#0000FF80"), track.height = 0.1)
# Get deletions data
sv_dels = sv_df %>%
dplyr::filter(SVTYPE == "DEL") %>%
dplyr::select(CHROM, POS, END, SAMPLE) %>%
dplyr::filter(SAMPLE == "11-1") %>%
dplyr::slice_sample(n = 1000)
# Initialize plot
circos.genomicInitialize(chroms)
# Add deletion data
#circos.genomicTrack(sv_dels, ylim = c(0,1),
#    panel.fun = function(region, value, ...) {
#        # numeric.column is automatically passed to `circos.genomicPoints()`
#        circos.genomicRect(region, value, ytop = 1, ybottom = 0)
#})
circos.genomicDensity(sv_dels, col = c("#0000FF80"), track.height = 0.1)
# Get deletions data
sv_dels = sv_df %>%
dplyr::filter(SVTYPE == "DEL") %>%
dplyr::select(CHROM, POS, END, SAMPLE) %>%
dplyr::filter(SAMPLE == "11-1") %>%
dplyr::slice_sample(n = 20000)
# Initialize plot
circos.genomicInitialize(chroms)
# Add deletion data
#circos.genomicTrack(sv_dels, ylim = c(0,1),
#    panel.fun = function(region, value, ...) {
#        # numeric.column is automatically passed to `circos.genomicPoints()`
#        circos.genomicRect(region, value, ytop = 1, ybottom = 0)
#})
circos.genomicDensity(sv_dels, col = c("#0000FF80"), track.height = 0.1)
# Get deletions data
sv_dels = sv_df %>%
dplyr::filter(SVTYPE == "DEL") %>%
dplyr::select(CHROM, POS, END, SAMPLE) %>%
dplyr::filter(SAMPLE == "11-1") %>%
dplyr::slice_sample(n = 30000)
# Initialize plot
circos.genomicInitialize(chroms)
# Add deletion data
#circos.genomicTrack(sv_dels, ylim = c(0,1),
#    panel.fun = function(region, value, ...) {
#        # numeric.column is automatically passed to `circos.genomicPoints()`
#        circos.genomicRect(region, value, ytop = 1, ybottom = 0)
#})
circos.genomicDensity(sv_dels, col = c("#0000FF80"), track.height = 0.1)
# Get deletions data
sv_dels = sv_df %>%
dplyr::filter(SVTYPE == "DEL") %>%
dplyr::select(CHROM, POS, END, SAMPLE) %>%
dplyr::filter(SAMPLE == "11-1")
# Initialize plot
circos.genomicInitialize(chroms)
# Add deletion data
#circos.genomicTrack(sv_dels, ylim = c(0,1),
#    panel.fun = function(region, value, ...) {
#        # numeric.column is automatically passed to `circos.genomicPoints()`
#        circos.genomicRect(region, value, ytop = 1, ybottom = 0)
#})
circos.genomicDensity(sv_dels, col = c("#0000FF80"), track.height = 0.1)
# Get deletions data
sv_dels = sv_df %>%
dplyr::filter(SVTYPE == "DEL") %>%
dplyr::select(CHROM, POS, END, SAMPLE)# %>%
# Initialize plot
circos.genomicInitialize(chroms)
# Add deletion data
#circos.genomicTrack(sv_dels, ylim = c(0,1),
#    panel.fun = function(region, value, ...) {
#        # numeric.column is automatically passed to `circos.genomicPoints()`
#        circos.genomicRect(region, value, ytop = 1, ybottom = 0)
#})
counter = 0
lapply(unique(sv_dels$SAMPLE), function(sample) {
# Set counter
counter <<- counter + 1
circos.genomicDensity(dplyr::filter(sv_dels, SAMPLE == sample), col = c("#0000FF80"), track.height = 0.1)
})
pal = ("#54478c","#2c699a","#048ba8","#0db39e","#16db93","#83e377","#b9e769","#efea5a","#f1c453","#f29e4c")
# Add deletion data
#circos.genomicTrack(sv_dels, ylim = c(0,1),
#    panel.fun = function(region, value, ...) {
#        # numeric.column is automatically passed to `circos.genomicPoints()`
#        circos.genomicRect(region, value, ytop = 1, ybottom = 0)
#})
pal = c("#54478c","#2c699a","#048ba8","#0db39e","#16db93","#83e377","#b9e769","#efea5a","#f1c453","#f29e4c")
pal
scales::show_col(pal)
# Get deletions data
sv_dels = sv_df %>%
dplyr::filter(SVTYPE == "DEL") %>%
dplyr::select(CHROM, POS, END, SAMPLE) %>%
dplyr::slice_sample(10000)# %>%
# Get deletions data
sv_dels = sv_df %>%
dplyr::filter(SVTYPE == "DEL") %>%
dplyr::select(CHROM, POS, END, SAMPLE) %>%
dplyr::slice_sample(10000)# %>%
# Get deletions data
sv_dels = sv_df %>%
dplyr::filter(SVTYPE == "DEL") %>%
dplyr::select(CHROM, POS, END, SAMPLE) %>%
dplyr::slice_sample(n = 10000)# %>%
# Initialize plot
circos.genomicInitialize(chroms)
# Add deletion data
#circos.genomicTrack(sv_dels, ylim = c(0,1),
#    panel.fun = function(region, value, ...) {
#        # numeric.column is automatically passed to `circos.genomicPoints()`
#        circos.genomicRect(region, value, ytop = 1, ybottom = 0)
#})
pal = c("#54478c","#2c699a","#048ba8","#0db39e","#16db93","#83e377","#b9e769","#efea5a","#f1c453","#f29e4c")
counter = 0
lapply(unique(sv_dels$SAMPLE), function(sample) {
# Set counter
counter <<- counter + 1
circos.genomicDensity(dplyr::filter(sv_dels, SAMPLE == sample), col = pal[counter], track.height = 0.05)
})
#circos.genomicDensity(sv_dels, col = c("#0000FF80"), track.height = 0.1)
# Get deletions data
sv_dels = sv_df %>%
dplyr::filter(SVTYPE == "DEL") %>%
dplyr::select(CHROM, POS, END, SAMPLE) %>%
dplyr::slice_sample(n = 30000)# %>%
dplyr::filter(SAMPLE == "11-1")
# Get deletions data
sv_dels = sv_df %>%
dplyr::filter(SVTYPE == "DEL") %>%
dplyr::select(CHROM, POS, END, SAMPLE) %>%
dplyr::slice_sample(n = 30000)# %>%
# Initialize plot
circos.genomicInitialize(chroms)
# Add deletion data
#circos.genomicTrack(sv_dels, ylim = c(0,1),
#    panel.fun = function(region, value, ...) {
#        # numeric.column is automatically passed to `circos.genomicPoints()`
#        circos.genomicRect(region, value, ytop = 1, ybottom = 0)
#})
pal = c("#54478c","#2c699a","#048ba8","#0db39e","#16db93","#83e377","#b9e769","#efea5a","#f1c453","#f29e4c")
counter = 0
lapply(unique(sv_dels$SAMPLE), function(sample) {
# Set counter
counter <<- counter + 1
circos.genomicDensity(dplyr::filter(sv_dels, SAMPLE == sample), col = pal[counter], track.height = 0.05)
})
#circos.genomicDensity(sv_dels, col = c("#0000FF80"), track.height = 0.1)
?genomicDensity
1e7
length(unique(sv_df$SVTYPE))
pal_pp = c("#9b5de5","#f15bb5","#fee440","#00bbf9","#00f5d4")
library(cowplot)
rm(pal_pp)
pal_paddle = c("#9b5de5","#f15bb5","#fee440","#00bbf9","#00f5d4")
sv_df %>%
ggplot() +
geom_bar(aes(SVTYPE, fill = SVTYPE)) +
scale_fill_manual(values = pal_paddle) +
theme_cowplot()
dplyr::count(sv_df, SVTYPE)
dplyr::count(sv_df, SVTYPE) %>% order(., n)
dplyr::count(sv_df, SVTYPE) %>% order(.)
?order
in_dir = here::here("data", "sv_analysis/20210217_sviper_filter_pass")
in_files = list.files(in_dir, full.names = T)
names(in_files) = basename(in_files) %>%
str_remove(".csv")
library(here)
source(here::here("code", "scripts", "sv_analysis", "source.R"))
reticulate::repl_python()
